$date
	Thu Aug 17 11:01:13 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Add_Sub_tb $end
$var wire 4 ! S [3:0] $end
$var wire 1 " cout $end
$var reg 4 # X [3:0] $end
$var reg 4 $ Y [3:0] $end
$var reg 1 % cin $end
$scope module add1 $end
$var wire 4 & S [3:0] $end
$var wire 4 ' X [3:0] $end
$var wire 4 ( Y [3:0] $end
$var wire 1 % cin $end
$var wire 1 " cout $end
$var wire 3 ) c [3:1] $end
$var wire 4 * B [3:0] $end
$scope module F1 $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 % c $end
$var wire 1 - d $end
$var wire 1 . f $end
$var wire 1 / p $end
$upscope $end
$scope module F2 $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 2 c $end
$var wire 1 3 d $end
$var wire 1 4 f $end
$var wire 1 5 p $end
$upscope $end
$scope module F3 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 c $end
$var wire 1 9 d $end
$var wire 1 : f $end
$var wire 1 ; p $end
$upscope $end
$scope module F4 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > c $end
$var wire 1 ? d $end
$var wire 1 " f $end
$var wire 1 @ p $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x@
z?
0>
0=
0<
x;
0:
z9
x8
07
06
x5
x4
z3
x2
11
10
x/
x.
z-
0,
1+
b10 *
b0xx )
b10 (
b11 '
bz &
0%
b10 $
b11 #
0"
bz !
$end
#5
1,
1=
x"
b1011 *
1<
b1011 $
b1011 (
b1011 #
b1011 '
#10
08
04
0"
x>
bx0x )
x:
01
0=
b1 *
00
16
0<
1%
b1110 $
b1110 (
b101 #
b101 '
#15
x8
bx )
x4
x"
11
1=
b1011 *
0+
b100 $
b100 (
b100 #
b100 '
#20
0"
0>
b0xx )
0:
0,
0=
b10 *
1+
06
0%
b10 $
b10 (
b1 #
b1 '
#25
